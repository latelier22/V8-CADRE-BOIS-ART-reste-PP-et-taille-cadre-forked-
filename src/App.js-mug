import React, { useRef, Suspense, useEffect } from 'react'
import { Canvas, useFrame, useThree } from '@react-three/fiber'
import { ContactShadows, Environment, OrbitControls, useGLTF } from '@react-three/drei'
import { FabricJSCanvas, useFabricJSEditor } from 'fabricjs-react'
import { fabric } from 'fabric'
import * as THREE from 'three'

function Model(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/MugModel.gltf')
  const { gl } = useThree()
  let canvas = Array.from(document.getElementsByTagName('canvas'))[1],
    ctx,
    texture
  ctx = canvas.getContext('2d')
  texture = new THREE.CanvasTexture(ctx.canvas)
  texture.flipY = false // Vous pouvez essayer true si nécessaire.

  texture.anisotropy = gl.capabilities.getMaxAnisotropy()
  texture.needsUpdate = true

  useFrame(() => {
    texture.needsUpdate = true
  })
  return (
    <group scale={[10, 10, 10]} position={[0, -1, 0]} ref={group} {...props} dispose={null}>
      <group rotation={[0, -0.412, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Cylinder003.geometry} material={materials.Material_1} />
        <mesh castShadow receiveShadow geometry={nodes.Cylinder003_1.geometry} material={materials['color-material']} />
      </group>
      <mesh castShadow receiveShadow geometry={nodes.Exterior.geometry} material={materials['white-material']} rotation={[0, -0.412, 0]} />
      <mesh
        rotation={[0, -0.412, 0]}
        castShadow
        receiveShadow
        geometry={nodes.Impression.geometry}
        material={materials['map-material']}
        otation={[0, -0.412, 0]}
        flipY={true}
      >
        <meshStandardMaterial attach="material" map={texture}>
          <canvasTexture attach="map" image={canvas} />
        </meshStandardMaterial>
      </mesh>
      <mesh castShadow receiveShadow geometry={nodes.Interior.geometry} material={materials['color-material']} rotation={[0, -0.412, 0]} />
    </group>
  )
}

useGLTF.preload('/MugModel.gltf')

export default function App() {
  const { editor, onReady } = useFabricJSEditor()

  useEffect(() => {
    if (editor) {
      editor.setFillColor('#FF0000')
      editor.canvas.backgroundColor = 'white'
    }
  })

  const onAddCircle = () => {
    editor.setFillColor('#FF0000')
    editor.addCircle()
  }

  const onAddRectangle = () => {
    editor.addRectangle()
  }

  const handleImageUpload = (e) => {
    const file = e.target.files[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (event) => {
        const imageUrl = event.target.result
        fabric.Image.fromURL(imageUrl, (image) => {
          image.scaleToWidth(editor.canvas.width)
          image.lockScalingY = true
          console.log(image)
          editor.canvas.add(image) // Utilisez l'éditeur Fabric.js pour ajouter l'image au canvas
        })
      }

      reader.readAsDataURL(file)
    }
  }

  return (
    <>
      <Canvas frameloop="always" shadows dpr={[1, 2]} camera={{ position: [1, 1, 2], fov: 45 }}>
        <color attach="background" args={['#000000']} />
        <ambientLight intensity={0.5} />
        <spotLight intensity={0.1} angle={0.1} penumbra={1} position={[10, 15, 10]} castShadow />
        <Suspense fallback={null}>
          <Model />
          <Environment preset="city" />
        </Suspense>
        <OrbitControls />
      </Canvas>
      <div className="test">
        <button onClick={onAddCircle}>Circle</button>
        <button onClick={onAddRectangle}>Rectangle</button>
        <input type="file" id="imageUpload" accept="image/*" onChange={handleImageUpload} />

        <FabricJSCanvas id="cnvs" className="sample-canvas" onReady={onReady} />
        <p>move circle around</p>
      </div>
    </>
  )
}
